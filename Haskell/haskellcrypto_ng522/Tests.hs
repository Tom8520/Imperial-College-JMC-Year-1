module Tests where

import IC.TestSuite

import Crypto

-------------------------------------------------------------------------------
-- PART 1 : asymmetric encryption

gcdTestCases
  = [ (0, 0) ==> 0
    , (0, 8) ==> 8
    , (8, 0) ==> 8
    , (3, 3) ==> 3
    , (12, 16) ==> 4
    , (16, 12) ==> 4
    , (65, 40) ==> 5
    , (735, 1239) ==> 21
    ]

phiTestCases
  = [ 0 ==> 0
    , 1 ==> 1
    , 2 ==> 1
    , 6 ==> 2
    , 18 ==> 6
    , 17 ==> 16
    , 31 ==> 30
    , 35 ==> 24
    , 77 ==> 60
    , 9999 ==> 6000
    ]

modPowTestCases
  = [ (0, 0, 1) ==> 0
    , (1, 1, 1) ==> 0
    , (1, 1, 2) ==> 1
    , (13481, 11237, 6) ==> 5
    , (8, 0, 1) ==> 0
    , (8, 0, 5) ==> 1
    , (237, 1, 1000) ==> 237
    , (859237, 1, 1000) ==> 237
    , (33893, 2, 10000) ==> 5449
    , (7433893, 2, 10000) ==> 5449
    , (13481503, 11237126, 46340) ==> 6629
    ]

computeCoeffsTestCases
  = [ (0, 0) ==> (1, 0)
    , (0, 8) ==> (0, 1)
    , (12, 16) ==> (-1, 1)
    , (16, 12) ==> (1, -1)
    , (65, 40) ==> (-3, 5)
    , (735, 1239) ==> (27, -16)
    , (1, 1) ==> (0, 1)
    ]

inverseTestCases
  = [ (11, 16) ==> 3
    , (4, 15) ==> 4
    , (18, 35) ==> 2
    , (35, 18) ==> 17
    , (12, 91) ==> 38
    , (34, 91) ==> 83
    , (64, 91) ==> 64
    ]

smallestCoPrimeOfTestCases
  = [ 1 ==> 2
    , 2 ==> 3
    , 12 ==> 5
    , 13 ==> 2
    , 30 ==> 7
    , 210 ==> 11
    ]

genKeysTestCases
  = [ (2, 3) ==> ((3,6),(1,6))
    , (17, 23) ==> ((3,391),(235,391))
    , (101, 83) ==> ((3,8383),(5467,8383))
    , (401, 937) ==> ((7,375737),(213943,375737))
    , (613, 997) ==> ((5,611161),(243821,611161))
    , (26641, 26437) ==> ((7,704308117),(100607863,704308117))
    ]

rsaEncryptTestCases
  = [ (4321, (3,8383)) ==> 3694
    , (324561, (5, 611161)) ==> 133487
    , (1234, (5,611161)) ==> 320878
    , (704308111, (7, 704308117)) ==> 704028181
    ]

rsaDecryptTestCases
  = [ (3694, (5467,8383)) ==> 4321
    , (133487, (243821,611161)) ==> 324561
    , (320878, (243821,611161)) ==> 1234
    , (704028181, (100607863,704308117)) ==> 704308111
    ]

stoiTestCases
 = [
  "hello" ==> 104101108108111,
  "a" ==> 97,
  "aa" ==> 97097,
  "ab" ==> 97098,
  "abcdefghijklmnopqrstuvwxyz" ==> 97098099100101102103104105106107108109110111112113114115116117118119120121122
 ]

intToStringTestCases
  = [ 104101108108111 ==> "hello",
  97 ==> "a",
  97097 ==> "aa",
  97098 ==> "ab",
  97098099100101102103104105106107108109110111112113114115116117118119120121122 ==> "abcdefghijklmnopqrstuvwxyz"
 ]

rsaEncryptTextTestCases
 = [
  ("a", (5, 10002200057)) ==> "\b\587\340\257",
  ("aba", (7, 23349492727005433449719969640760869919134252193597681099237036615191279078037028881035443792662491721057366481407658473838656480054190324040008246820465204452786997697176205838912452507203902633118569751549295880405286765962012909897196257295027262098985950853700994687133152235848494134213089108898709472056618290324040008246820465204452786996257295027258473838656480054190324040008294056466849940203363809311748843894162472406679924576815606757466968408972082340203363809311748843894162472406679924576811748843894162472406679924576800178620191497805696577853311037280233393)) ==> "Q\372\a\148\762\425\988\597\522\&1\DC2K\611\414\607\417\244\772q",
  ("Hello World!", fst (genKeysLarge (8489165838192909654227353535625*10^4136+1) (10^(2085+1)*(818181818+10^(2085+9))+1))) ==> "\STXi\\\334\899\905V\381\478\296p\302\279\138\774\444\197\455\897\697\845\636\339\536\473t\753\951\781\543\702\471f\761\976g\978\857\535\644\865#\490\494\890\657\392\458\157Y\847\764\399\415\833\218\989\838\DEL\460\199\956\966\517\672\880\973\725\195p\163\519\731\274\488\215\751J\170\183\356\253\555\359\289d\256\211i\721\513\870D\262\357\785^\765y\870\222\437\992\876\561\387\586\347\847\646:\958\134\332\&3\933\265\591\400\235\146\709\743\234\947\947\250\925\NULs\412\197\521\604\694\970\849\951\301\394\288\321\562\422\226\265\513\382\161\536\380\658;\991\637\607\808\659\186\232\538\343\753\265\537\415\373\203\335\807N\972\918\824\404\546\758\628\277\359\939T\231\161\824$\589\790\418\745\724\994\322\322\272\941\231\451\911\953\263\&7\956\959\871O\128\978\339\160\630\852\CAN\842\219\605\805\525\504\588<\482m\178\678\819}\222\333\507\687\374\211\153\537\154\334\870\619\732_\544\882\301q\929\972\736\333\723\722\753h\660\625\258\603\569\859\238\357\283\305\709\260\487\138\224\SI\781\370\902\234\915\685\260\417\564\313\649\404\487\531\977\488\270\568\370;\245\599\803\NUL\717\434\251\165\451:\712\181\618\602\236\422:\CAN\963\623\923\563\968\531\143\682\712\572\865\576\985\817\260\249\936\300\742\325\721\663\990\367k\736\907g\404\348\DC3\441\444\307\151\993\955\292\315\332\414\848\346\439\271\681\759\848\347$\467\853\553\438\804\650\SYN\414\256\351\DC4\916\388\217\990\853\857\955\674x\481\640\160\825\631=p\767\644\310E\202\202\534\479\284\537\645\584'\b\915\995\222\520\480\629\397*\611\850\627\884\184\593\SO\502\435\145\505\848\612\606\DC2\ESC\886\439\784E\410\626\968\940\462\229\961\768\777*\159\946\464\554\292\&6\DC3\137\&1\310\991\536\836\386\576\204\596\549\754\280\540\926\655\469\600\311\401\371\722\213g\418\655F\903\476X\369\854\816\557\728K\350\362e\922\251\842\947\694\940\206\352+\196\535\303\609\636\937\476\683\814\284\587\890\202\129\507\676\757\213\621\529\136\449\293\459\732\DC1\153\312\SOHt\628\579\750\888\956\580\206\547\381\ENQ\224Q\659\194\406\261\396\662\492\554\264\413\NAK\945\677\377"
 
 ]

rsaDecryptTextTestCases
 = [
  ("\b\587\340\257", (8001600029, 10002200057)) ==> "a",
  ("Q\372\a\148\762\425\988\597\522\&1\DC2K\611\414\607\417\244\772q", (13342567272591682167235709554889923703661519127907803702888108756594290426754551545401592569289882872721199420543344971996964076086991913425219359768103787631448074281929626224677214929588040528676596201290989718055689355522035559769717620583891245250720390263311856975155307816454452663, 23349492727035443792662491721057366481407658473838656480054190324040008246820465204452786996257295027262098985950853700994687133152235848494134213089108898709472056618294056466849940203363809311748843894162472406679924576815606757466968408972082300178620191497805696577853311037280233393)) ==> "aba",
  ("\STXi\\\334\899\905V\381\478\296p\302\279\138\774\444\197\455\897\697\845\636\339\536\473t\753\951\781\543\702\471f\761\976g\978\857\535\644\865#\490\494\890\657\392\458\157Y\847\764\399\415\833\218\989\838\DEL\460\199\956\966\517\672\880\973\725\195p\163\519\731\274\488\215\751J\170\183\356\253\555\359\289d\256\211i\721\513\870D\262\357\785^\765y\870\222\437\992\876\561\387\586\347\847\646:\958\134\332\&3\933\265\591\400\235\146\709\743\234\947\947\250\925\NULs\412\197\521\604\694\970\849\951\301\394\288\321\562\422\226\265\513\382\161\536\380\658;\991\637\607\808\659\186\232\538\343\753\265\537\415\373\203\335\807N\972\918\824\404\546\758\628\277\359\939T\231\161\824$\589\790\418\745\724\994\322\322\272\941\231\451\911\953\263\&7\956\959\871O\128\978\339\160\630\852\CAN\842\219\605\805\525\504\588<\482m\178\678\819}\222\333\507\687\374\211\153\537\154\334\870\619\732_\544\882\301q\929\972\736\333\723\722\753h\660\625\258\603\569\859\238\357\283\305\709\260\487\138\224\SI\781\370\902\234\915\685\260\417\564\313\649\404\487\531\977\488\270\568\370;\245\599\803\NUL\717\434\251\165\451:\712\181\618\602\236\422:\CAN\963\623\923\563\968\531\143\682\712\572\865\576\985\817\260\249\936\300\742\325\721\663\990\367k\736\907g\404\348\DC3\441\444\307\151\993\955\292\315\332\414\848\346\439\271\681\759\848\347$\467\853\553\438\804\650\SYN\414\256\351\DC4\916\388\217\990\853\857\955\674x\481\640\160\825\631=p\767\644\310E\202\202\534\479\284\537\645\584'\b\915\995\222\520\480\629\397*\611\850\627\884\184\593\SO\502\435\145\505\848\612\606\DC2\ESC\886\439\784E\410\626\968\940\462\229\961\768\777*\159\946\464\554\292\&6\DC3\137\&1\310\991\536\836\386\576\204\596\549\754\280\540\926\655\469\600\311\401\371\722\213g\418\655F\903\476X\369\854\816\557\728K\350\362e\922\251\842\947\694\940\206\352+\196\535\303\609\636\937\476\683\814\284\587\890\202\129\507\676\757\213\621\529\136\449\293\459\732\DC1\153\312\SOHt\628\579\750\888\956\580\206\547\381\ENQ\224Q\659\194\406\261\396\662\492\554\264\413\NAK\945\677\377", snd ( genKeysLarge (8489165838192909654227353535625*10^4136+1) (10^(2085+1)*(818181818+10^(2085+9))+1))) ==> "Hello World!"
 ]

-------------------------------------------------------------------------------
-- PART 2 : symmetric encryption

toIntTestCases
  = [ 'a' ==> 0
    , 'z' ==> 25
    , 'h' ==> 7
    , 'b' ==> 1
    ]

toCharTestCases
  = [ 0 ==> 'a'
    , 25 ==> 'z'
    , 7 ==> 'h'
    , 1 ==> 'b'
    ]

addTestCases
  = [ ('a', 'a') ==> 'a'
    , ('d', 's') ==> 'v'
    , ('w', 't') ==> 'p'
    , ('z', 'z') ==> 'y'
    ]

substractTestCases
  = [ ('a', 'a') ==> 'a'
    , ('v', 's') ==> 'd'
    , ('p', 'w') ==> 't'
    , ('z', 'z') ==> 'a'
    ]

ecbEncryptTestCases
  = [ ('w', "") ==> ""
    , ('d', "w") ==> "z"
    , ('x', "bonjour") ==> "ylkglro"
    , ('k', "hello") ==> "rovvy"
    ]

ecbDecryptTestCases
  = [ ('w', "") ==> ""
    , ('d', "z") ==> "w"
    , ('x', "ylkglro") ==> "bonjour"
    , ('k', "rovvy") ==> "hello"
    ]

cbcEncryptTestCases
  = [ ('w', 'i', "") ==> ""
    , ('d', 'i', "w") ==> "h"
    , ('x', 'w', "bonjour") ==> "ufpvgxl"
    , ('k', 'q', "hello") ==> "hvqlj"
    ]

cbcDecryptTestCases
  = [ ('w', 'i', "") ==> ""
    , ('d', 'i', "h") ==> "w"
    , ('x', 'w', "ufpvgxl") ==> "bonjour"
    , ('k', 'q', "hvqlj") ==> "hello"
    ]

-- You can add your own test cases above

allTestCases
  = [ TestCase "gcd" (uncurry Crypto.gcd)
                     gcdTestCases
    , TestCase "phi" phi
                     phiTestCases
    , TestCase "modPow" (uncurry3 modPow)
                        modPowTestCases
    , TestCase "computeCoeffs" (uncurry computeCoeffs)
                             computeCoeffsTestCases
    , TestCase "inverse" (uncurry inverse)
                         inverseTestCases
    , TestCase "alternate inverse implementation" (uncurry inverseAlternate)
                         inverseTestCases
    , TestCase "smallestCoPrimeOf" (smallestCoPrimeOf)
                                   smallestCoPrimeOfTestCases
    , TestCase "genKeys" (uncurry genKeys)
                         genKeysTestCases
    , TestCase "rsaEncrypt" (uncurry rsaEncrypt)
                            rsaEncryptTestCases
    , TestCase "rsaDecrypt" (uncurry rsaDecrypt)
                            rsaDecryptTestCases
    , TestCase "toInt" (toInt)
                       toIntTestCases
    , TestCase "toChar" (toChar)
                       toCharTestCases
    , TestCase "add" (uncurry add)
                     addTestCases
    , TestCase "substract" (uncurry substract)
                           substractTestCases
    , TestCase "ecbEncrypt" (uncurry ecbEncrypt)
                            ecbEncryptTestCases
    , TestCase "ecbDecrypt" (uncurry ecbDecrypt)
                            ecbDecryptTestCases
    , TestCase "cbcEncrypt" (uncurry3 cbcEncrypt)
                            cbcEncryptTestCases
    , TestCase "cbcDecrypt" (uncurry3 cbcDecrypt)
                       cbcDecryptTestCases
    , TestCase "stoi" (stoi)
                       stoiTestCases
    , TestCase "intToString" (intToString)
                       intToStringTestCases
    , TestCase "rsaEncryptText" (uncurry rsaEncryptText)
                       rsaEncryptTextTestCases
    , TestCase "rsaDecryptText" (uncurry rsaDecryptText)
                       rsaDecryptTextTestCases
    ]


runTests = mapM_ goTest allTestCases

main = runTests
